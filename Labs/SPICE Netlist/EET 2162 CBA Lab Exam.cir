** Christ Brian Amedjonekou Lab Exam **
* 
* NI Multisim to SPICE Netlist Export
* Generated by: Chris
* Mon, Oct 29, 2018 20:17:43 
*

*## Multisim Component U7 ##*
aU7  [4 13] 14 OR2__TIL__1




*## Multisim Component U11 ##*
aU11  [3 7 10] 11 AND2__TIL__1





*## Multisim Component B_C_D ##*
aB_C_D  [3 8 6] 9 AND2__TIL__1





*## Multisim Component U9 ##*
aU9  [2 12] 13 AND2__TIL__1




*## Multisim Component U8 ##*
aU8 [5
+      9
+      11]
+      12 OR2__TIL__1





*## Multisim Component U6 ##*
aU6 6 10 NOT__TIL__1



*## Multisim Component U5 ##*
aU5 7 8 NOT__TIL__1



*## Multisim Component U4 ##*
aU4 3 5 NOT__TIL__1



*## Multisim Component U3 ##*
aU3 2 4 NOT__TIL__1



*## Multisim Component D ##*
* !!!BEGIN-INTERACT
*  1.0 constant high
*  0.0 constant low
*  2   constant max_states
*  low VARIABLE volt
*
*  :MAP_KEYBOARD_INPUT ++++K1 1 ++++k1 -1 ;
*
*  : UPDATE_SETTINGS
*     *animation_state max_states  low  high  STATE  volt 
*     GRADUAL_CHANGE_AT_RUN  
*  ;
*
*  :KEYBOARD_INPUT locals| shift_state |
*     shift_state *animation_state max_states NEXT_STATE_WRAP
*                                             ==>_*animation_state
*     UPDATE_SETTINGS
*  ;
*
*  :GRADUAL_CHANGE_AT_RUN locals| ref value |
*     value  SET_MODEL_INSTANCE d_constsource digital_source  a1 state
*  ;
*
*  : INIT_IMOUSE_OPTION
*    1 0 4 IMOUSE_SET
*  ;
*
*  : GET_IMOUSE_SUBCOMPS ( -- [iIdxN ... iIdx1] )
*    1
*  ;
*
*  : ON_SUBCOMP_IMOUSE_EVENT locals| eEventType nOptions iSubCompIdx |
*    eEventType 2 = if
*      -1
*      -1 KEYBOARD_INPUT
*    else
*      0
*    endif
*  ;
*
*  ( Initialize the settings )
*   UPDATE_SETTINGS
*   INIT_IMOUSE_OPTION
*
*  :BEGIN_PLOT
*     UPDATE_SETTINGS
*  ;
*
*  :BEGIN_ANALYSIS
*    UPDATE_SETTINGS
*  ;
*
* !!!END-INTERACT

xD 6 digital_sourceD

.subckt digital_sourceD OUT

a1 OUT digital_source
.model digital_source d_constsource(state=0)

.ends


*## Multisim Component C ##*
* !!!BEGIN-INTERACT
*  1.0 constant high
*  0.0 constant low
*  2   constant max_states
*  low VARIABLE volt
*
*  :MAP_KEYBOARD_INPUT ++++K1 1 ++++k1 -1 ;
*
*  : UPDATE_SETTINGS
*     *animation_state max_states  low  high  STATE  volt 
*     GRADUAL_CHANGE_AT_RUN  
*  ;
*
*  :KEYBOARD_INPUT locals| shift_state |
*     shift_state *animation_state max_states NEXT_STATE_WRAP
*                                             ==>_*animation_state
*     UPDATE_SETTINGS
*  ;
*
*  :GRADUAL_CHANGE_AT_RUN locals| ref value |
*     value  SET_MODEL_INSTANCE d_constsource digital_source  a1 state
*  ;
*
*  : INIT_IMOUSE_OPTION
*    1 0 4 IMOUSE_SET
*  ;
*
*  : GET_IMOUSE_SUBCOMPS ( -- [iIdxN ... iIdx1] )
*    1
*  ;
*
*  : ON_SUBCOMP_IMOUSE_EVENT locals| eEventType nOptions iSubCompIdx |
*    eEventType 2 = if
*      -1
*      -1 KEYBOARD_INPUT
*    else
*      0
*    endif
*  ;
*
*  ( Initialize the settings )
*   UPDATE_SETTINGS
*   INIT_IMOUSE_OPTION
*
*  :BEGIN_PLOT
*     UPDATE_SETTINGS
*  ;
*
*  :BEGIN_ANALYSIS
*    UPDATE_SETTINGS
*  ;
*
* !!!END-INTERACT

xC 7 digital_sourceC

.subckt digital_sourceC OUT

a1 OUT digital_source
.model digital_source d_constsource(state=0)

.ends


*## Multisim Component B ##*
* !!!BEGIN-INTERACT
*  1.0 constant high
*  0.0 constant low
*  2   constant max_states
*  low VARIABLE volt
*
*  :MAP_KEYBOARD_INPUT ++++K1 1 ++++k1 -1 ;
*
*  : UPDATE_SETTINGS
*     *animation_state max_states  low  high  STATE  volt 
*     GRADUAL_CHANGE_AT_RUN  
*  ;
*
*  :KEYBOARD_INPUT locals| shift_state |
*     shift_state *animation_state max_states NEXT_STATE_WRAP
*                                             ==>_*animation_state
*     UPDATE_SETTINGS
*  ;
*
*  :GRADUAL_CHANGE_AT_RUN locals| ref value |
*     value  SET_MODEL_INSTANCE d_constsource digital_source  a1 state
*  ;
*
*  : INIT_IMOUSE_OPTION
*    1 0 4 IMOUSE_SET
*  ;
*
*  : GET_IMOUSE_SUBCOMPS ( -- [iIdxN ... iIdx1] )
*    1
*  ;
*
*  : ON_SUBCOMP_IMOUSE_EVENT locals| eEventType nOptions iSubCompIdx |
*    eEventType 2 = if
*      -1
*      -1 KEYBOARD_INPUT
*    else
*      0
*    endif
*  ;
*
*  ( Initialize the settings )
*   UPDATE_SETTINGS
*   INIT_IMOUSE_OPTION
*
*  :BEGIN_PLOT
*     UPDATE_SETTINGS
*  ;
*
*  :BEGIN_ANALYSIS
*    UPDATE_SETTINGS
*  ;
*
* !!!END-INTERACT

xB 3 digital_sourceB

.subckt digital_sourceB OUT

a1 OUT digital_source
.model digital_source d_constsource(state=0)

.ends


*## Multisim Component A ##*
* !!!BEGIN-INTERACT
*  1.0 constant high
*  0.0 constant low
*  2   constant max_states
*  low VARIABLE volt
*
*  :MAP_KEYBOARD_INPUT ++++K1 1 ++++k1 -1 ;
*
*  : UPDATE_SETTINGS
*     *animation_state max_states  low  high  STATE  volt 
*     GRADUAL_CHANGE_AT_RUN  
*  ;
*
*  :KEYBOARD_INPUT locals| shift_state |
*     shift_state *animation_state max_states NEXT_STATE_WRAP
*                                             ==>_*animation_state
*     UPDATE_SETTINGS
*  ;
*
*  :GRADUAL_CHANGE_AT_RUN locals| ref value |
*     value  SET_MODEL_INSTANCE d_constsource digital_source  a1 state
*  ;
*
*  : INIT_IMOUSE_OPTION
*    1 0 4 IMOUSE_SET
*  ;
*
*  : GET_IMOUSE_SUBCOMPS ( -- [iIdxN ... iIdx1] )
*    1
*  ;
*
*  : ON_SUBCOMP_IMOUSE_EVENT locals| eEventType nOptions iSubCompIdx |
*    eEventType 2 = if
*      -1
*      -1 KEYBOARD_INPUT
*    else
*      0
*    endif
*  ;
*
*  ( Initialize the settings )
*   UPDATE_SETTINGS
*   INIT_IMOUSE_OPTION
*
*  :BEGIN_PLOT
*     UPDATE_SETTINGS
*  ;
*
*  :BEGIN_ANALYSIS
*    UPDATE_SETTINGS
*  ;
*
* !!!END-INTERACT

xA 2 digital_sourceA

.subckt digital_sourceA OUT

a1 OUT digital_source
.model digital_source d_constsource(state=0)

.ends


*## Multisim Component X2 ##*
* !!!BEGIN-INTERACT
*  0.0       VARIABLE pin_index
*  0.0       VARIABLE pin_state
*
*  :ON_USER_UPDATE
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*  ;   
*
*  :OUT_DATA
*   *pin_index GET_REAL_DATA ==>_*pin_state
*   0.9 *pin_state  f.<   if
*       1 7 0 SET_SUBCOMP_PRP
*       1 8 0 SET_SUBCOMP_PRP
*       1 9 0 SET_SUBCOMP_PRP
*       1 10 0 SET_SUBCOMP_PRP
*       1 11 0 SET_SUBCOMP_PRP
*       1 12 0 SET_SUBCOMP_PRP
*       1 13 0 SET_SUBCOMP_PRP
*       1 14 0 SET_SUBCOMP_PRP
*   else
*       0 7 0 SET_SUBCOMP_PRP
*       0 8 0 SET_SUBCOMP_PRP
*       0 9 0 SET_SUBCOMP_PRP
*       0 10 0 SET_SUBCOMP_PRP
*       0 11 0 SET_SUBCOMP_PRP
*       0 12 0 SET_SUBCOMP_PRP
*       0 13 0 SET_SUBCOMP_PRP
*       0 14 0 SET_SUBCOMP_PRP
*   endif
*  ;
*
*  :BEGIN_PLOT
*     GET_NODE_INDEX 1 ==>_*pin_index
*  ;
* !!!END-INTERACT
xX2 15 Probe_digX2
.subckt Probe_digX2 1
a1 1 2 InputBuffer
a2 2 Digload  
.MODEL Digload d_pulldown(load = 1e-12)
.MODEL InputBuffer d_buffer (rise_delay = 1n fall_delay = 1n)
.ends


*## Multisim Component U2 ##*
aU2  [1 14] 15 AND2__TIL__1




*## Multisim Component U1 ##*
aU1  [2 3] 1 AND2__TIL__1





.MODEL OR2__TIL__1 d_or ( rise_delay = 1n fall_delay = 1n)

.MODEL NOT__TIL__1 d_inverter (rise_delay = 1n fall_delay = 1n)

.MODEL AND2__TIL__1 d_and ( rise_delay = 1n fall_delay = 1n)


